'use strict';

//Сборка проекта на Gulp 4.

// После изменения файла gulpfile.js, нужно перезагрузить сервер browser-sync.

// Команда gulp.task() имеет два параметра: имя таска и функцию-обработчик.

/* =========================================================================================
Подключение пакетов (создание переменных) из папки /node_modules
---------------------------------------------------------------- *
/* В папке /node_modules хранятся все пакеты, которые мы установлили в консоли через npm.
Для подключения пакета не надо прописывать полный путь до пакета в папке /node_modules.
Достатоточно указать имя пакета. Команда require запрашивает пакет по его имени. */
// Подключаем пакет gulp.
const gulp = require('gulp');
// Подключаем пакет gulp-concat для конкатенации (объединения) файлов.
const concat = require('gulp-concat');
// Подключаем пакет gulp-autoprefixer для автоматического проставления префиксов к scss свойствам.
const autoprefixer = require('gulp-autoprefixer');
// Подключаем пакет gulp-clean-css для сжатия файлов .scss.
const cleanCSS = require('gulp-clean-css');
// Подключаем пакет gulp-uglify для сжатия файлов .js.
const uglify = require('gulp-uglify');
// Подключаем пакет del для удаления абсолютно всех данных из указанной папки.
const del = require('del');
// Подключаем пакет browserSync для автоматического обновления страницы браузера по нашему запросу.
const browserSync = require('browser-sync').create();
// Подключаем пакет sourcemaps для расшифровки ранее сжатых (минифицированных) файлов (для отладки кода или для просмотра в инспекторе кода Google Chrome).
const sourcemaps = require('gulp-sourcemaps');
// Подключаем пакет sass для компиляции файлов препроцессора .sass в файлы .css.
const sass = require('gulp-sass');
// Подключаем пакет imagemin для сжатия файлов картинок форматов PNG, JPEG, GIF и SVG (кроме файлов .ico).
const imagemin = require('gulp-imagemin');
// Подключаем пакет gulp-rename для переименования файлов, добавления различных суффиксов (suffix: '-hola') и префиксов (prefix: 'bonjour-') к именам файлов, изменения пути хранения файлов (dirname: 'main/text/new'), изменения расширений файлов (extname: '.md').
const rename = require('gulp-rename');
// Подключаем пакет imagemin-jpeg-recompress для сжатия картинок только в формате JPEG (сжимает JPEG лучше чем gulp-imagemin).
const imageminJpegRecompress = require('imagemin-jpeg-recompress');

/* =========================================================================================
Таск libsCSS для подключения библиотек файлов .css/.scss и их объединения в один файл _libs.scss
------------------------------------------------------------------------------------------------
Таск libsCSS подключает библиотеки файлов .css/.scss и объединяет их в один автоматически генерируемый 
файл _libs.scss для импорта в файл main.scss. */
gulp.task('libsCSS', function () {
    return gulp.src([
        'node_modules/slick-carousel/slick/slick.scss', // Библиотека Slick slider — это jquery плагин для быстрого создания на сайте адаптивного слайдера.
        'node_modules/reset-css/reset.css', // Небольшой набор CSS правил, в результате применения которых сбрасываются стили всех HTML элементов до соответствующих изначальных значений.
        // 'node_modules/normalize.css/normalize.css', // Небольшой CSS-файл, который обеспечивает для HTML-элементов лучшую кроссбраузерность в стилях по умолчанию (альтернатива традиционному reset.css.).
        'node_modules/animate.css/animate.css', // Библиотека для анимации css.

        // fancybox v3.5.7 выдает ошибку при компиляции CSS в SСSS (код в gulpfile.js). Поэтому он закоментирован (код в gulpfile.js) и подключается по старинке через link в файле index.html.
        // 'node_modules/@fancyapps/fancybox/dist/jquery.fancybox.css', // Библиотека Fancybox — это jquery плагин лайтбоксов JavaScript для отображения изображений, видео и другого контента. Отзывчивый, сенсорный и настраиваемый.
    ])
        .pipe(concat('_libs.scss'))
        .pipe(gulp.dest('src/scss'))
        .pipe(browserSync.stream())
});

/* =========================================================================================
Таск libsJS для подключения библиотек файлов .js и их объединения в один файл _libs.js
--------------------------------------------------------------------------------------
Таск libsJS подключает библиотеки файлов .js и объединяет их в один автоматически генерируемый
файл _libs.js для передачи в массив файлов scriptFiles. */
gulp.task('libsJS', function () {
    return gulp.src([
        'node_modules/jquery/dist/jquery.js', // Библиотека jQuery - это набор функций JavaScript, фокусирующийся на взаимодействии JavaScript и HTML. jQuery помогает легко получать доступ к любому элементу DOM, обращаться к атрибутам и содержимому элементов DOM, манипулировать ими.
        'node_modules/slick-carousel/slick/slick.js', // Библиотека Slick slider — это jquery плагин для быстрого создания на сайте адаптивного слайдера.
        'node_modules/@fancyapps/fancybox/dist/jquery.fancybox.js',
        // 'node_modules/fancybox/dist/js/jquery.fancybox.js', // Библиотека Fancybox — это jquery плагин лайтбоксов JavaScript для отображения изображений, видео и другого контента. Отзывчивый, сенсорный и настраиваемый.
    ])
        .pipe(concat('_libs.js'))
        .pipe(uglify())
        .pipe(gulp.dest('src/js'))
        .pipe(browserSync.stream())
});

/* =========================================================================================
Создание массива файлов .scss для передачи в таск styles на обработку
---------------------------------------------------------------------
Порядок подключения файлов со стилями. */
const styleFiles = [
    // Основной scss-код (aimCode).
    './src/scss/main.scss',
    //
    // Медиа-запросы (должны быть подключены после основного scss-кода) (aimCode).
    // './src/scss/_media.scss'
];

/* =========================================================================================
Создание массива файлов .js для передачи в таск scripts на обработку
--------------------------------------------------------------------
Порядок подключения js файлов */
const scriptFiles = [
    // Библиотеки (должны быть подключены до основгого js-кода).
    './src/js/_libs.js',
    //
    // Модули (функционально законченные фрагменты программы) (aimCode).
    './src/js/modules/*.js',
    //
    // Основной js-код (aimCode).
    './src/js/main.js'
];

/* =========================================================================================
Таск styles для обработки стилей
--------------------------------
Таск styles обрабатывает и переносит scss-код из папки /src/scss в папку /build/css. */
gulp.task('styles', () => {
    // Команде gulp.src() передается набор файлов styleFiles.
    // Таск найдет все файлы по шаблону './src/scss/**/*.scss' и обработает (скомпилирует, минифицирует, сожмет и т.д.).
    return gulp.src(styleFiles)
    /* .pipe() - это одно конкретное действие, которое мы совершаем над нашими файлами.
    Каждый .pipe() будет вносить изменения в наш проект. В .pipe() надо передавать плагины, написанные
    специально для gulp. Эти плагины могут видоизменять поток и возвращать его в измененном виде. */
        .pipe(sourcemaps.init()) // Инициализация sourcemap.
        .pipe(sass()) // Компиляция файлов препроцессора .sass в файлы .css.
        .pipe(concat('style.css')) // Конкатенации (объединение) вновь скомпилированных файлов .css в один итоговый файл style.css.
        .pipe(autoprefixer({ // Автоматическая добавка префиксов (webkit, -ms, -o, -moz) к css-свойствам в файле style.css.
            // Свойство фильтрации непопуляреых браузеров: можно указать 'last 2 versions', а можно '> 0.1%' (если больше 0.1%, то используем браузер).
            overrideBrowserslist: ['last 2 versions'],
            cascade: false
        }))
        .pipe(cleanCSS({ // Минификация (сжатие) итогового файла style.css.
            level: 2 // Максимальный уровень минификации (из 3-х: 0, 1, 2).
        }))
        .pipe(sourcemaps.write('./')) // Создание map-файла (style.css.map) в корне проекта ./, (дает возможность видеть реальную структуру сжатого кода, для отладки).
        .pipe(rename({ // Добавление суффикса .min к имени файла style.css.
            suffix: '.min'
        }))
        // Команде gulp.dest() передается папка места назначения (destination) для итогового файла style.css.
        .pipe(gulp.dest('./build/css')) // Выгрузка файла style.css. в папку /build/css.
        .pipe(browserSync.stream()) // Команда серверу (запущенному в таске watch), чтобы он обновил браузер, если мы обновим scss-код в папке /src/scss.
});

/* =========================================================================================
Таск scripts для обработки скриптов
-----------------------------------
Таск scripts обрабатывает и переносит js-код из папки /src/js в папку /build/js. */
gulp.task('scripts', () => {
    // Команде gulp.src() передается набор файлов scriptFiles.
    // Таск найдет все файлы по шаблону './src/js/**/*.js' и обработает (скомпилирует, минифицирует, сожмет и т.д.).
    return gulp.src(scriptFiles)
        .pipe(concat('script.js')) // Конкатенации (объединение) файлов scriptFiles в один итоговый файл script.js.
        .pipe(uglify({ // Минификация (сжатие) итогового файла script.js.
            toplevel: true // Максимальный уровень минификации.
        }))
        .pipe(rename({ // Добавление суффикса .min к имени файла script.js.
            suffix: '.min'
        }))
        // Команде gulp.dest() передается папка места назначения (destination) для итогового файла script.js.
        .pipe(gulp.dest('./build/js')) // Выгрузка файла script.js. в папку /build/js.
        .pipe(browserSync.stream()) // Команда серверу (запущенному в таске watch), чтобы он обновил браузер, если мы обновим js-код в папке /src/js.
});

/* =========================================================================================
Таск clean для очистки папки /build и удаления файлов библиотек _libs.scss и _libs.js
-------------------------------------------------------------------------------------
Таск clean вызывает пакет del и передает ему маску для удаления всех данных из папки /build,
а так же удаляются файлы автоматически генерируемых сборных библиотек _libs.scss и _libs.js.  */
gulp.task('clean', () => {
    return del(['build/*', 'src/scss/_libs.scss', 'src/js/_libs.js']) // В массиве можно указать несколько папок и/или файлов для очистки.
});

/* =========================================================================================
Таск img-compress для сжатия файлов картинок
--------------------------------------------
Таск img-compress сжимает файлы картинок форматов PNG, JPEG, GIF и SVG (кроме файлов .ico) и переносит
все сжатые картинки в папку /build/img/ с сохранением вложенности папок. */
gulp.task('img-compress', () => {
    return gulp.src('./src/img/**') // Таск найдет все картинки по шаблону './src/img/**'.
        .pipe(imagemin([ // Будут сжаты все картинки в папке img и в подпапках папки img.
            imageminJpegRecompress({ // Вместо встроенной функции imagemin(), используем функцию imageminJpegRecompress() для лучшего сжатия файлов .jpeg.
                loops: 4, // Количество попыток для оптимизации (по умолчанию 6).
                min: 70, // Минимальное качество изображения (по умолчанию 40), но опытным путем я подобрал 70.
                max: 80, // Максимальное качество изображения (по умолчанию 95), опытным путем подобрал 80.
                quality: 'high' // Предустановка качества (по умолчанию medium), может быть low, medium, high и veryhigh, особой разницы не заметил, более важны min и max.
            }),
            imagemin.gifsicle(),
            imagemin.optipng(),
            imagemin.svgo()
        ]))
        .pipe(gulp.dest('./build/img/')) // Выгруза картинок в папку /build/img с сохранением вложенности папок.
});

/* =========================================================================================
Таск watch для отслеживания изменений в файлах
----------------------------------------------
Таск watch отслеживает изменения в файлах и запускает обработчики событий (другие таски).
gulp.watch() - это фоновая команда, которая будет висеть в консоле и ожидать события.
Таск watch должен работать все время в фоне пока мы пишем scss-код и js-код. Поэтому если нужно выполнить
иные команды в консоли, то открываем новую консоль командой cmd+n и запускаем midnight commander командой mc (если надо).
Для завершения таска watch, в консоли надо нажать ctrl+c. */
gulp.task('watch', () => {
    browserSync.init({ // Инициализация синхронизации.
        /* Запуск сервера (http://localhost:3000) на node.js. Сервер будет готов обновиться, но ему надо будет сказать в .pipe - обновись.
        Можно тестировать сайт в одной wifi-сети (например с телефона), по адресу: http://192.168.1.38:3000
        (192.168.1.38 - это ip рабочей машины, взят из консоли при запуске сервера localhost).
        Фишка: если скролить страницу на одном устройстве, то скролинг будет синхронизироваться на все остальные.
        Просмотр страницы index.html по адресу: http://localhost:3000
        Просмотр страницы someFile.html по адресу: http://localhost:3000/someFile.html (и т.д. другие страницы). */
        server: {
            baseDir: './' // Указание, где лежат файлы .html (в корневой папке /).
        },
        tunnel: false, // Локальный туннель (localtunnel). Включить: true, отключить: false. Скопировать адрес туннеля в консоли и дать заказчику для ознакомления с сайтом (опционально).
        port: 8081, // Установка порта для сервера localhost (опционально, по умолчанию порт 3000).
        logPrefix: 'aimSite' // Установка префикса работающего в консоли сервера (опционально, ни на что не влияет).
    });
    gulp.watch('./src/img/**', gulp.series('img-compress')); // Добавление/удаление любых картинок в папке /src/img/**, запустит таск img-compress.
    gulp.watch('./src/scss/**/*.scss', gulp.series('styles')); // Изменение любых файлов .scss в папке /src/scss, запустит таск styles.
    gulp.watch('./src/js/**/*.js', gulp.series('scripts'));  // Изменение любых файлов .js в папке /src/js, запустит таск scripts.
    gulp.watch('./*.html').on('change', browserSync.reload); // Изменение любых файлов .html в корневой папке /, запустит синхронизацию браузера.
});

/* =========================================================================================
Таск build для очистки и финальной пересборки проекта в папке /build
--------------------------------------------------------------------
Сначала таск build запустит команду gulp.series(). Команда gulp.series() выполняет параметры в
последовательном режиме, т.е. последовательно запустятся следующие таски:
- таск clean (удаление файлов в папке /build, а так же удаление файлов автоматически генерируемых сборных библиотек _libs.scss и _libs.js);
- таск libsCSS (автоматическая генерация файла _libs.scss, объединяющего библиотеки файлов .css/.scss);
- таск libsJS (автоматическая генерация файла _libs.js, объединяющего библиотеки файлов .js);
Далее команда gulp.parallel() выполняет параметры в параллельном режиме, т.е. паралельно запустяться
не противоречащие друг другу таски:
- таск styles (обработка и перенос scss-кода из папки /src/scss в папку /build/css);
- таск scripts (обработка и перенос js-код из папки /src/js в папку /build/js);
- таск img-compress (сжатие файлов картинок).
В итоге, сначала последовательно отработают таски clean, libsCSS, libsJS, а потом параллельно таски styles, scripts и img-compress. */
gulp.task('build', gulp.series('clean', 'libsCSS', 'libsJS',
    gulp.parallel('styles', 'scripts', 'img-compress')
));

/* =========================================================================================
Таск dev для очистки, пересборки проекта и отслеживания изменений в файлах
--------------------------------------------------------------------------
Таск dev последовательно запустит два таска: сначала отработает таск build, а потом запуститься
таск watch, который будет висеть, отслеживая изменения в файлах папки /src. */
gulp.task('dev', gulp.series('build', 'watch'));




