'use strict';
//
//
$(function () { // Эта строка говорит, что сначало должен загрузится html-код (DOM элементов), и только потом js-код.
    //
    //
    // -#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-
    // -#- Открытие модальных окон с анимацией открытия. -#-
    // -#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-
    //
    /* Мы имеем две кнопки для вызова модальных окон в секции intro:
    "HIRE ME", "SEE MY RESUME", а так же в секции projects находятся
    карточки проектов, кликнув на которые, будет вызвано соответствующее
    модальное окно для конкретного проекта.
    Сохраняем в переменную modalCall массив всех элементов (кнопок для вызова
    модальных окон, карточек проектов), у которых есть атрибут data-modal.
    Атрибуты data-modal хранят следующие значения id соответствующих элементов
    (модальных окон): modal_hire_me, modal_resume, modal_project_1. */
    var modalCall = $('[data-modal]');
    /* Отслеживаем событие клика на конкретном элементе (кнопках или карточках
    проектов, для вызова модальных окон), имеющем атрибут data-modal. */
    modalCall.on('click', function (event) {
        /* Отменим стандартное поведение ссылки (иначе кнопка сделанная ссылкой
        будет делать скачок наверх). */
        event.preventDefault();
        // Сохраняем саму кнопку (или карточку проекта), по которой мы кликнули.
        var $this = $(this);
        /* Сохраним в переменной modalId значение id, хранящееся в атрибуте data-modal,
        полученном при клике на конкретном элементе (варианты
        значений id элементов (модальных окон): modal_hire_me или modal_resume или modal_project_1). */
        var modalId = $this.data('modal');
        /* Обращаемся к конкретному модальному окну по полученному id (modalId уже содержит символ # в html-коде)
        и добавляем в соответствующий этому id элемент, класс show, для показа этого модального окна
        при нажатии на соответствующей кнопке (или карточке проекта). */
        $(modalId).addClass('show');
        /* При открытии модальных окон, мы добавляем в html к тегу body класс no-scroll,
        и тем самым отменяем возможность скроллить страницу, находящуюся за модальным окном,
        т.к. в этом нет необходимости при открытом модальном окне. */
        $('body').addClass('no-scroll');
        //
        /* АНИМАЦИЯ ОТКРЫТИЯ МОДАЛЬНОГО ОКНА (после добавления классов show и no-scroll).
        Устанавливаем задержку исполнения в 200 милисекунд для плавного перехода
        трансформации (поворота) модального окна. */
        setTimeout(function () { // Код внутри setTimeout() будет исполнен через 200 мл.секунд после вызова модального окна.
            /* Обращаемся к конкретному модальному окну по полученному id (modalId уже содержит символ # в html-коде)
            и находим в этом модальном окне элемент с классом modal__dialog. Далее для найденного
            элемента мы меняем его css-свойство с названием transform: 'rotateX()'
            (от исходного значения 90 градусов [заданного в css] до 0 градусов). Т.е. мы поворачиваем модальное окно. */
            $(modalId).find('.modal__dialog').css({
                transform: 'rotateX(0)'
            });
        }, 200);
    });
    //
    //
    // -#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-
    // -#- Закрытие модальных окон с анимацией закрытия. -#-
    // -#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-
    //
    /* Мы имеем три кнопки "крестика" для закрытия модальных окон, кликнув
    на которые, соответствующее модальное окно будет закрыто.
    Сохраняем в переменную modalClose массив всех элементов (кнопок для закрытия
    модальных окон), у которых есть атрибут data-close.
    Атрибуты data-close хранят следующие значения id соответствующих элементов
    (модальных окон): modal_hire_me, modal_resume, modal_project_1. */
    var modalClose = $('[data-close]');
    /* Отслеживаем событие клика на конкретном элементе (конкретной кнопке
    для закрытия модального окона), имеющем атрибут data-close. */
    modalClose.on('click', function (event) {
        /* Отменим стандартное поведение ссылки (иначе кнопка сделанная ссылкой
        будет делать скачок наверх). */
        event.preventDefault();
        // Сохраняем саму кнопку "крестик", по которой мы кликнули.
        var $this = $(this);
        /* Сохраним в переменной modalId значение id, хранящееся в атрибуте data-close,
        полученном при клике на конкретном элементе (кнопке "крестик"). Варианты
        значений id элементов (модальных окон): modal_hire_me или modal_resume или modal_project_1). */
        var modalId = $this.data('close');
        //
        /* АНИМАЦИЯ УДАЛЕНИЯ МОДАЛЬНОГО ОКНА (до удаления классов show и no-scroll). */
        /* Обращаемся к конкретному модальному окну по полученному id (modalId уже содержит символ # в html-коде)
        и находим в этом модальном окне элемент с классом modal__dialog. Далее для найденного
        элемента мы меняем его css-свойство с названием transform: 'rotateX()'
        (от значения 0 градусов [установленного выше в js-коде при открытии окна] до 90 градусов). Т.е. мы поворачиваем модальное окно. */
        $(modalId).find('.modal__dialog').css({
            transform: 'rotateX(90deg)'
        });
        /* Устанавливаем задержку исполнения в 200 милисекунд для удаления классов show и no-scroll. */
        setTimeout(function () { // Код внутри setTimeout() будет исполнен через 200 мл.секунд после анимации закрытия модального окна.
            /* Обращаемся к конкретному модальному окну по полученному id (modalId уже содержит символ # в html-коде)
            и удаляем у соответствующего этому id элемента, класс show, для сокрытия этого модального окна
            при нажатии на соответствующей кнопке "крестик". */
            $(modalId).removeClass('show');
            /* При закрытии модальных окон, мы удаляем в html у тега body класс no-scroll,
            и тем самым возвращаем возможность скроллить страницу, находящуюся за модальным окном,
            т.к. скролл страницы сайта необходим при закрытом модальном окне. */
            $('body').removeClass('no-scroll');
        }, 200);
    });
    //
    //
    // -#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-
    // -#- Закрытие модальных окон кликом по пустому месту вокруг модального окна, с анимацией закрытия. -#-
    // -#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-
    //
    /* Элемент с классом modal - это маска модального окна. Отслеживаем событие клика
    на элементе с классом modal. */
    $('.modal').on('click', function (event) {
        // Сохраняем элемент по которому мы кликнули.
        var $this = $(this);
        //
        /* АНИМАЦИЯ УДАЛЕНИЯ МОДАЛЬНОГО ОКНА (до удаления классов show и no-scroll). */
        /* Обращаемся к конкретному элементу (маске модального окна, имеющей класс modal),
        по которому был совершен клик, и находим в этом модальном окне элемент с классом modal__dialog. Далее для найденного
        элемента мы меняем его css-свойство с названием transform: 'rotateX()'
        (от значения 0 градусов [установленного выше в js-коде при открытии окна] до 90 градусов). Т.е. мы поворачиваем модальное окно. */
        $this.find('.modal__dialog').css({
            transform: 'rotateX(90deg)'
        });
        /* Устанавливаем задержку исполнения в 200 милисекунд для удаления классов show и no-scroll. */
        setTimeout(function () {
            /* Обращаемся к конкретному элементу (маске модального окна, имеющей класс modal),
            по которому был совершен клик, и удаляем у этого элемента класс show, для сокрытия
            этого модального окна. Т.е. мы закрываем модальное окно по его маске (элементу
            с классом modal). */
            $this.removeClass('show');
            /* При закрытии модальных окон, мы удаляем в html у тега body класс no-scroll,
            и тем самым возвращаем возможность скроллить страницу, находящуюся за модальным окном,
            т.к. скролл страницы сайта необходим при закрытом модальном окне. */
            $('body').removeClass('no-scroll');
        }, 200);
        //
        /* Элемент с классом projectSlider является СЛАЙДЕРОМ. Этот слайдер листает скрины о конкретном
        проекте, находясь внутри модального окна. Для слайдера projectSlider генерируется класс
        slick-slider (библиотекой slick). Установим setPosition для слайдера projectSlider.
        setPosition нужен для перерасчета размеров окна слайдера, чтобы слайдер выставился
        как положено (в нужной позиции). */
        $('.projectSlider').slick('setPosition');
        //
    });
    /* В элементе с классом modal__dialog находится вся информация модального окна.
    Это непосредственно модальное окно (без маски, т.е. без окружающего его элемента (родителя) с классом modal).
    Отслеживаем событие клика на элементе с классом modal__dialog. */
    $('.modal__dialog').on('click', function (event) {
        /* Если мы кликаем по элементу с классом modal__dialog, то мы отменяем событие
        клика по его родителю - элементу с классом modal, и тем самым мы отменяем закрытие
        модального окна при клике по непосредственно модальному окну (без маски). */
        event.stopPropagation();
    });
});