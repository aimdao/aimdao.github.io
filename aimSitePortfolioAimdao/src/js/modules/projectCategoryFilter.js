'use strict';
//
//
$(function () { // Эта строка говорит, что сначало должен загрузится html-код (DOM элементов), и только потом js-код.
    //
    //
    // -#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-
    // -#- Фильтрация проектов по категориям в секции projects данного сайта. -#-
    // -#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-
    //
    /* Мы имеем ссылки для фильтрации проектов: All, App, Website, Interaction.
    Сохраняем в переменную filter массив всех элементов (ссылок для фильтрации),
    у которых есть атрибут data-filter. Атрибут data-filter создан для хранения
    значений категорий: all или app или website или interaction.
    к*/
    var filter = $('[data-filter]');
    /* Отслеживаем событие клика на конкретном элементе (ссылке для фильтрации),
    имеющем атрибут data-filter. */
    filter.on('click', function (event) {
        /* Отменим стандартное поведение ссылки (иначе кнопка сделанная ссылкой
        будет делать скачок наверх). */
        event.preventDefault();
        /* Сохраним в переменной categoryFilter значение атрибута data-filter,
        полученное при клике на конкретном элементе (варианты
        значений: all или app или website или interaction). */
        var categoryFilter = $(this).data('filter');
        /* Сначало сравним: если категория, которую мы предварительно задали
        кликом в качестве фильтра (categoryFilter), равна значению all, то... */
        if (categoryFilter == 'all') {
            /* тогда мы у всех проектов (элеметов) с атрибутом data-category
             удалим класс reuse__hide (служащий для сокрытия элементов) и тем самым
             покажем все эти элементы (проекты), в не зависимости от того, были ли
             они раннее скрыты или нет. */
            $('[data-category]').removeClass('reuse__hide');
        } else {
            /* Однако, если категория не равно значению all, то опираясь на сохраненное
            в categoryFilter значение, отфильтруем проекты по этому значению и покажем в
            потфолио только те прокеты (элементы), которые имеют в атрибуте data-filter
            значение равное значению в categoryFilter (остальные проекты скроем).
            Для этого, с помощью метода each(), пройдем по всем элементам, у которых есть
            атрибут data-category, и если значение атрибута data-category не совпадет со
            значением переменной categoryFilter, то мы скроем этот элемент (добавим ему класс reuse__hide). */
            $('[data-category]').each(function () {
                /* Проходя по каждому элементу, сохраняем в переменной projectCategory значение
                его атрибута data-category (для дальнейшего сравнения). */
                var projectCategory = $(this).data('category');
                /* Сравниваем категорию конкретного очередного проекта (projectCategory) c категорией,
                которую мы предварительно задали кликом в качестве фильтра (categoryFilter). Если
                они не равны, то скрываем из выдачи портфолио данный конкретный очередной проект.
                И так на всех итерациях метода each(), пока в выдаче на останутся проекты с нужной
                нам категорией в атрибуте data-category. */
                if (projectCategory != categoryFilter) {
                    // Скрываем проект, добавляя ему класс reuse__hide, служащий для сокрытия элементов.
                    $(this).addClass('reuse__hide');
                } else {
                    // Показываем проект, удаляя у него класс reuse__hide, служащий для сокрытия элементов.
                    $(this).removeClass('reuse__hide');
                } // Конец внутреннего if-else.
            });
        } // Конец внешнего if-else.
    });
});